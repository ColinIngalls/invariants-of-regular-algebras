//-----COMPLETED TASK -----//
//1.Concat those two vector space and compare the dimensions, and print if they are not a direct sum
//2. Implement the tensor using user-defined functions. 
//2.1 Figure out identity element

//------TODO LIST------//
//TODO 2.2 Make the I_2 receive input. 
//TODO 3. Globalization? Read: https://magma.maths.usyd.edu.au/magma/handbook/text/1360 
//TODO 4. Input that felix is working on

QQ := RationalField();

FF<k> := PolynomialRing(QQ);

//Choose what field depending on whether it needs a imaginary number or not

N<p> := NumberField(k^2+1);
//N := QQ;
//F := RationalField();

P<x,y,a,b> := PolynomialRing(N,4);

q12 := Matrix(P,2,4,[1,0,x,y,
				     0,1,a,b]);
q13 := Matrix(P,2,4,[1,x,0,y,
				     0,a,1,b]);
q14 := Matrix(P,2,4,[1,x,y,0,
				     0,a,b,1]);
q23 := Matrix(P,2,4,[x,1,0,y,
				     a,0,1,b]);
q24 := Matrix(P,2,4,[x,1,y,0,
				     a,0,b,1]);
q34 := Matrix(P,2,4,[x,y,1,0,
				     a,b,0,1]);

F<w,x,y,z> := FreeAlgebra(N,4);
G := [w,x,y,z];

d := 157;
f := [
x*w + w*x,

z*y - p*y*z,

y*w + w*y + p*x*y - w*z + x*z,

y*x + p*w*y - x*y - w*z - x*z,

z*w + p*w*y - p*x*y - p*w*z - x*z,

z*x + p*w*y + p*x*y - w*z + p*x*z

	 ];

m := [B*A: A in G,B in G];
I2_original := Transpose(Matrix(P,6,16,[[MonomialCoefficient(l,k): k in m] : l in f]));

I2_perp := Transpose(NullspaceMatrix(I2_original));

I2 := I2_perp;

V := ScalarMatrix(P,4,1);

q12V := TensorProduct(q12,V);
q13V := TensorProduct(q13,V);
q14V := TensorProduct(q14,V);
q23V := TensorProduct(q23,V);
q24V := TensorProduct(q24,V);
q34V := TensorProduct(q34,V);

qVI_12 := HorizontalJoin(Transpose(q12V),I2);
qVI_12_minor:= Minors(qVI_12,16);

qVI_13 := HorizontalJoin(Transpose(q13V),I2);
qVI_13_minor:= Minors(qVI_13,16);

qVI_14 := HorizontalJoin(Transpose(q14V),I2);
qVI_14_minor:= Minors(qVI_14,16);

qVI_23 := HorizontalJoin(Transpose(q23V),I2);
qVI_23_minor:= Minors(qVI_23,16);

qVI_24 := HorizontalJoin(Transpose(q24V),I2);
qVI_24_minor:= Minors(qVI_24,16);

qVI_34 := HorizontalJoin(Transpose(q34V),I2);
qVI_34_minor:= Minors(qVI_34,16);



//Matching P5 to the Magma's Minors convention

P5<e34,e24,e23,e14,e13,e12>:= ProjectiveSpace(N,5); //Plucker
G := Scheme(P5, e12*e34-e24*e13+e23*e14);

A4 := Spec(P);
f12 := map<A4 -> G | Minors(q12,2)>;
f13 := map<A4 -> G | Minors(q13,2)>;
f14 := map<A4 -> G | Minors(q14,2)>;
f23 := map<A4 -> G | Minors(q23,2)>;
f24 := map<A4 -> G | Minors(q24,2)>;
f34 := map<A4 -> G | Minors(q34,2)>;

lineSchemePatch_1 := Scheme(A4,qVI_12_minor);
lineSchemePatch_2 := Scheme(A4,qVI_13_minor);
lineSchemePatch_3 := Scheme(A4,qVI_14_minor);
lineSchemePatch_4 := Scheme(A4,qVI_23_minor);
lineSchemePatch_5 := Scheme(A4,qVI_24_minor);
lineSchemePatch_6 := Scheme(A4,qVI_34_minor);

"Computing closure 1...";
closure_1 := f12(lineSchemePatch_1);
"Computing closure 2...";
closure_2 := f13(lineSchemePatch_2);
"Computing closure 3...";
closure_3 := f14(lineSchemePatch_3);
"Computing closure 4...";
closure_4 := f23(lineSchemePatch_4);
"Computing closure 5...";
closure_5 := f24(lineSchemePatch_5);
"Computing closure 6...";
closure_6 := f34(lineSchemePatch_6);


l := Union(Union(Union(Union(Union(closure_1,closure_2),closure_3),closure_4),closure_5),closure_6);

red_l := ReducedSubscheme(l);
comp := IrreducibleComponents(red_l);
sing_l := [ReducedSubscheme(SingularSubscheme(I)): I in comp];
"Dimension of l", Dimension(red_l);
"Dimension,degree of components:",[[Dimension(comp[I]),Degree(comp[I]),Dimension(sing_l[I]),Degree(sing_l[I])]: I in [1..#comp]];

